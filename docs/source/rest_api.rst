.. _rest_api:

******************
Caelum REST API v1
******************

.. contents::
    :local:
    :depth: 2
    
****

Общая информация
================

**Caelum** REST API предназначен для получения и сохранения данных в кластере **Caelum**. Помимо получения основных
данных, REST API позволяет получать информацию о состоянии узла и узнавать некоторые параметры конфигурации.
При запуске узла в режиме тестирования, узел обрабатывает дополнительные типы запросов, предназначенные для
сценариев автоматизированного тестирования и отладки.

Общая информация о конечных точках API

- Узел работает в одном из двух режимов: *prod* - эксплуатационный и *test* - режим тестирования. Некоторые конечные
  точки доступны только в режиме тестирования.
- Все конечные точки возвращают ответы в формате JSON
- Порт по умолчанию для узла - *9698*
- Данные типа *время* - это всегда UTC количество миллисекунд с начала эпохи
- При указании периодов, время начала всегда включается (*inclusive*), а время конца - исключается (*exclusive*)


Основной интерфейс
==================
Функции основного интерфейса доступны в любом режиме и предназначены для работы с основными типами данных,
а также для получения служебной информации об узле. 

Интервалы агрегации
-------------------

Для получения списка поддерживаемых узлом интервалов агрегации следует использовать запрос на адрес

.. code-block::

    GET /api/v1/intervals

Конечная точка возвращает список идентификаторов интервалов, поддерживаемых данным узлом.
Идентификатор интервала состоит из двух частей. Буква (или буквы) в начале идентификатора определяют единицу
времени: M - минута, H - час, D - день. Номер в конце идентификатора определяет сколько соответствующих единиц
входит в интервал. Например, M1 - минутный интервал, M5 - пятиминутный, H2 - двухчасовой, и т.п.

.. note::
    Важно понимать, что список интервалов определяет интервалы, по которым данный узел может выдавать
    кортежи, в том числе те интервалы, для которых генерация кортежей выполняется *на лету* на основании
    младших интервалов. Для получения информации о тех интервалах, для которых запущены агрегаторы и
    генерируются потоковые уведомления следует запрашивать состояние агрегаторов.

**Параметры:** Нет

**Ответ:**

.. code-block:: json

    {
      "time" : 1599146456977,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "rows" : [ "M1", "M5", "M30", "H1", "H8", "H12", "D1" ]
      }
    }


Список категорий
----------------

Получить список всех категорий можно путем обращения на адрес

.. code-block::

    GET /api/v1/categories

Список категорий упорядочен в алфавитном порядке.

**Параметры:** Нет

**Ответ:**

.. code-block:: json

    {
      "time" : 1599148185703,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "rows" : [ "", "MOEX", "NASDAQ", "LSE" ]
      }
    }



Список символов категории
-------------------------

Получить список символов категории можно посредством обращения на адрес

.. code-block::

    GET /api/v1/symbols

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | category    | STRING | Да  | Идентификатор категории |
 +-------------+--------+-----+-------------------------+
 | afterSymbol | STRING | Нет | Предыдущий символ       |
 +-------------+--------+-----+-------------------------+
 | limit       |    INT | Нет | Лимит выборки           |
 +-------------+--------+-----+-------------------------+

 - *afterSymbol* Используется для продолжения выборки в случае, когда был достигнут лимит.
   В качестве *afterSymbol* следует указывать последний символ предыдущей выборки.
 - *limit* Ограничивает количество элементов выборки. Значение по-умолчанию зависит от параметров конфигурации узла.

**Ответ:**

.. code-block:: json

    {
      "time" : 1599149798259,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "category" : "MOEX",
        "rows" : [ "MOEX@SBER", "MOEX@GAZP", "MOEX@PLZL" ]
      }
    }


Регистрация символа
-------------------

Зарегистрировать новый символ или группу символов можно выполнить используя обращение по адресу

.. code-block::

    PUT /api/v1/symbol

Данная функция поддерживает пакетный режим: в случае передачи нескольких параметров *symbol*, все символы
будут зарегистрированы в базе данных в виде отдельной транзакции. При этом для каждого символа осуществляется
определение и регистрация соответствующих категорий.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }



Список событий символа
----------------------

Получить список событий символа для указанного периода времени можно выполнить путем обращения по адресу

.. code-block::

    GET /api/v1/events

Список слотов событий упорядочен по времени от ранних к более поздним. Список событий внутри слота
упорядочен от меньших идентификаторов к большим.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+
 | from        | LONG   | Да  | Начало периода          |
 +-------------+--------+-----+-------------------------+
 | to          | LONG   | Нет | Конец периода           |
 +-------------+--------+-----+-------------------------+
 | limit       | INT    | Нет | Лимит выборки           |
 +-------------+--------+-----+-------------------------+

**Ответ:**

.. code-block:: json

    {
      "time" : 1599213714883,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "symbol" : "hero@buck.rogers",
        "rows" : [ {
          "time" : 279390,
          "tokens" : {
            "5" : "Buck",
            "7" : "Rogers"
          }
        }, {
          "time" : 1599224724000,
          "tokens" : {
            "5001" : "Hello, World!",
            "5002" : "25.904",
            "5010" : "1928-08-01"
          }
        } ]
      }
    }


Добавление или изменение событий
--------------------------------

Добавить или изменить события символа для временного слота можно путем обращения по адресу

.. code-block::

    PUT /api/v1/events

В результате исполнения запроса в базу добавляются новые события, связанные с указанным временем.
Если в базе данных уже есть события с такими идентификаторами, то их значения будут перезаписаны
новыми значениями.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+
 | time        | LONG   | Да  | Время слота событий     |
 +-------------+--------+-----+-------------------------+
 | {attr_no}   | STRING | Нет | Значение атрибута       |
 +-------------+--------+-----+-------------------------+
 
Запрос позволяет указывать произвольное количество атрибутов *attr_no*. Для идентификации атрибутов
используются целочисленные значения. Значения атрибутов - строки. Состав и содержимое атрибутов
определяется пользователем. Например, атрибут с номером 10 может идентифицировать адрес электронной
почты, атрибут с номером 12 - дату рождения и т.д.

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }


Удаление событий
----------------

Для удаления событий символа из временного слота следует использовать запрос по адресу

.. code-block::

    DELETE /api/v1/events

В результате выполнения запроса события с указанными идентификаторами удаляются из базы данных.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+
 | time        | LONG   | Да  | Время слота событий     |
 +-------------+--------+-----+-------------------------+
 | {attr_no}   | STRING | Нет | Строка delete           |
 +-------------+--------+-----+-------------------------+

Запрос позволяет указывать произвольное количество атрибутов *attr_no*. В качестве значения параметра
необходимо указывать строковое значение *delete*, которое используется как маркер подтверждения.
Если для указанного временного слота нет событий с указанными идентификаторами, то ничего не происходит.

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }


Список пунктов
--------------

Получить список пунктов символа можно путем обращения по адресу

.. code-block::

    GET GET /api/v1/items

Запрос на этот адрес возвращает список пунктов в порядке их регистрации.

.. note::
    Важно помнить, что порядок следования событий упорядочен в порядке поступления в систему. Сортировка по времени
    не гарантируется. Возможна ситуация, при которой в результирующей выборке более раннее события будет следовать
    за более поздними. 

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+
 | from        | LONG   | Нет | Начало периода          |
 +-------------+--------+-----+-------------------------+
 | to          | LONG   | Нет | Конец периода           |
 +-------------+--------+-----+-------------------------+
 | fromOffset  | LONG   | Нет | Стартовое смещение      |
 +-------------+--------+-----+-------------------------+
 | magic       | STRING | Нет | Контрольная фраза       |
 +-------------+--------+-----+-------------------------+
 | limit       | INT    | Нет | Лимит выборки           |
 +-------------+--------+-----+-------------------------+

 - *fromOffset* имеет повышенный приоритет перед *from*. То есть, если указан *fromOffset*,
   то *from* игнорируется. *fromOffset* используется для продолжения выборки.
 - *limit* Ограничивает количество элементов выборки. Зависит от параметров конфигурации узла.


**Ответ:**

.. code-block:: json

    {
      "time" : 1599214231392,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "symbol" : "5Hly2z@aWVluI",
        "format" : "std",
        "rows" : [
            [ 1599214231300, "250.19", "100.000" ],
            [ 1599214231305, "249.08", "150.005" ],
            [ 1599214231329, "237.53", "200.100" ]
          ],
        "magic" : "1d36d9f8175889ec291f381c972263d9",
        "fromOffset" : 5760
      }
    }



Список кортежей
---------------

Получить агрегированные данные по символу за период можно путем обращения по адресу

.. code-block::

    GET /api/v1/tuples/{interval}

В данном запросе *interval* должен быть заменен на идентификатор интервала (см. Интервалы агрегации).

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Идентификатор символа   |
 +-------------+--------+-----+-------------------------+
 | from        | LONG   | Нет | Начало периода          |
 +-------------+--------+-----+-------------------------+
 | to          | LONG   | Нет | Конец периода           |
 +-------------+--------+-----+-------------------------+
 | limit       | INT    | Нет | Лимит выборки           |
 +-------------+--------+-----+-------------------------+

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : {
        "symbol" : "0yRmTr@v52V78",
        "interval" : "M1",
        "format" : "std",
        "rows" : [
            [ 2632980000, "100.31", "105.19", "100.05", "100.55", "10000.00" ],
            [ 2633040000, "100.55", "102.35", "100.50", "103.47", "15000.00" ],
            [ 2633100000, "103.47", "108.92", "101.49", "104.08", "20000.00" ]
          ]
      }
    }


Служебный интерфейс
===================

Адреса служебного интерфейса предназначены для получения сервисной информации о состоянии узла.

Проверка доступности узла
-------------------------

Выполнить проверку доступности узла можно выполнив запрос по адресу

.. code-block::

    GET /api/v1/ping

Запросы на этот адрес могут использоваться как для проверки состояния узла, так и для проверки точности времени хоста.

**Параметры:** Нет

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }



Состояние агрегаторов
---------------------

Запросить состояние агрегаторов можно выполнив запрос на адрес

.. code-block::

    GET /api/v1/aggregator/status

Информация о состоянии агрегаторов позволяет проверить какие агрегаторы запущены на узле и в каком режиме на момент
запроса эти агрегаторы находятся.

**Параметры:** Нет

**Ответ:**

.. code-block:: json

    {
      "time": 1599232402520,
      "error": false,
      "code": 0,
      "message": null,
      "data": {
        "rows": [
          {
            "implCode": "AK",
            "interval": "M1",
            "type": "ITEM",
            "state": "RUNNING",
            "statusInfo": {
              "source": "caelum-item",
              "target": "caelum-tuple-m1",
              "store": "caelum-tuple-store-m1",
              "availability": true,
              "state": "RUNNING"
            }
          }, {
            "implCode": "AK",
            "interval": "H1",
            "type": "ITEM",
            "state": "RUNNING",
            "statusInfo": {
              "source": "caelum-item",
              "target": "caelum-tuple-h1",
              "store": "caelum-tuple-store-h1",
              "availability": true,
              "state": "RUNNING"
            }
          }
        ]
      }
    }



Интерфейс тестового режима
==========================

Конечные точки данной категории доступны только при запуске узла в тестовом режиме.
При запросах на эти адреса в режиме эксплуатации узел выдаст ошибку HTTP 403.

Служебная запись в журнал
-------------------------

Добавление отладочной записи в журнал узла может быть выполнена посредством обращения по адресу

.. code-block::

    GET /api/v1/logMarker

Эта конечная точка позволяет сценариям тестирования журналировать процесс тестирования в отладочных целях.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | marker      | STRING | Да  | Текст сообщения         |
 +-------------+--------+-----+-------------------------+

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }



Добавление пунктов
------------------

Добавить пункты в целях тестирования можно путем выполнения запроса по адресу

.. code-block::

    PUT /api/v1/item

Данный интерфейс позволяет тестовым сценариям заполнять базу данных пунктами.
Интерфейс поддерживает пакетный режим и позволяет добавлять один или несколько пунктов за один запрос. 

.. note::
    Не следует использовать этот интерфейс для регистрации новых пунктов в эксплуатационном режиме. Хотя данный
    интерфейс поддерживает пакетный режим и осуществляет сохранения событий в транзакционном режиме,
    гарантировать надежность и проверить факт сохранения данных посредством REST API не представляется возможным.
    Для подачи данных в систему **Caelum** в эксплуатационном режиме следует использовать выделенный фидер.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | symbol      | STRING | Да  | Символ                  |
 +-------------+--------+-----+-------------------------+
 | time        | LONG   | Да  | Время                   |
 +-------------+--------+-----+-------------------------+
 | value       | DECIMAL| Да  | Качественное значение   |
 +-------------+--------+-----+-------------------------+
 | volume      | DECIMAL| Да  | Количественное значение |
 +-------------+--------+-----+-------------------------+

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }



Удаление данных
---------------

Удалить данные под управлением **Caelum** можно выполнив запрос

.. code-block::

    GET /api/v1/clear

Помимо удаления данных, данная процедура перезапускает агрегаторы и прочие сервисы. Используя этот запрос
можно сбросить **Caelum** в исходное состояние, пригодное для загрузки новых тестовых данных.

**Параметры:**

 +-------------+--------+-----+-------------------------+
 | Имя         | Тип    |Обяз.| Описание                |
 +=============+========+=====+=========================+
 | global      | BOOL   | Нет | Флаг глобальной очистки |
 +-------------+--------+-----+-------------------------+

Если *global* не установлен, то будет выполнена очистка локальных хранилищ узла. Если *global* установлен,
то будет выполнено удаление всех данных под управлением **Caelum**. 

**Ответ:**

.. code-block:: json

    {
      "time" : 1599218309320,
      "error" : false,
      "code" : 0,
      "message" : null,
      "data" : null
    }
 
